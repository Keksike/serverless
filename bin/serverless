#!/usr/bin/env node

'use strict';

const BbPromise = require('bluebird');
const {getErrorObject, logError} = require('../lib/classes/Error');

BbPromise.config({
  longStackTraces: true,
});

process.on('unhandledRejection', (e) => logError(e));
process.noDeprecation = true;

let serverless;

(() => BbPromise.resolve().then(() => {
  // requiring here so that if anything went wrong,
  // during require, it will be caught.
  const Serverless = require('../lib/Serverless'); // eslint-disable-line global-require
  serverless = new Serverless({
    interactive: typeof process.env.CI === 'undefined',
  });

  return serverless.init().then(() => serverless.run());
}).catch(e => {
  process.exitCode = 1;
  logError(getErrorObject(e), serverless.processedInput.options.output);
}))();
